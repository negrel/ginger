package events

{{ $type := .Type -}}
{{- $Type := .Type | title -}}

{{- if eq $type "interface{}" -}}
{{- $Type = "Object" -}}
{{- end -}}

{{- $TypeChangeListener := printf "%sChangeListener" $Type -}}
{{- $typeChangeListener := printf "%sChangeListener" ($Type | lower) -}}
{{- $ObservableType := printf "Observable%s" $Type -}}

// {{ $TypeChangeListener }} is notified whenever the value of an Observable{{ $Type }} change.
type {{ $TypeChangeListener }} interface {
	Changed(old, new {{ $type }})
}

type {{ $typeChangeListener }} func(old, new {{ $type }})

func (cl {{ $typeChangeListener }}) Changed(old, new {{ $type }}) {
	cl(old, new)
}

// Make{{ $TypeChangeListener }} wraps your Observable{{ $Type }} change handler
// and returns it.
func Make{{ $TypeChangeListener }}(handler func(old, new {{ $type }})) {{ $TypeChangeListener }} {
	return {{ $typeChangeListener }}(handler)
}

// {{ $ObservableType }} is an entity that wraps a {{ $type }} value and allows to observe
// the value for changes.
type {{ $ObservableType }} interface {
	Observable

	AddChangeListener({{ $TypeChangeListener }})
	RemoveChangeListener({{ $TypeChangeListener }})

	Get() {{ $type }}
	Set({{ $type }})
}

{{ if ne $Type "Object" -}}
{{- $observableType := printf "observable%s" $Type -}}

type {{ $observableType }} struct {
	observable
	value {{ $type }}
	changeListeners map[{{ $TypeChangeListener }}]struct{}
}

func New{{ $ObservableType }}(initialValue {{ $type }}) {{ $ObservableType }} {
	o := &{{ $observableType }}{
		value:           initialValue,
		changeListeners: make(map[{{ $TypeChangeListener }}]struct{}),
	}
	o.observable = makeCompositeObservable(o)

	return o
}

func (o *{{ $observableType }}) AddChangeListener(listener {{ $TypeChangeListener }}) {
	o.changeListeners[listener] = struct{}{}
}

func (o *{{ $observableType }}) RemoveChangeListener(listener {{ $TypeChangeListener }}) {
	delete(o.changeListeners, listener)
}

func (o *{{ $observableType }}) Get() {{ $type }} {
	return o.value
}

func (o *{{ $observableType }}) Set(newValue {{ $type }}) {
	if (newValue == o.Get()) {
		return
	}
	
	old := o.value
	o.value = newValue

	o.triggerChange(old, newValue)
}

func (o *{{ $observableType }}) triggerChange(old, new {{ $type }}) {
	for changeListener := range o.changeListeners {
		changeListener.Changed(old, new)
	}
}

{{- end -}}
